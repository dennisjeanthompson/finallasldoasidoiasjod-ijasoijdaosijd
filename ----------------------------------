import java.util.*;

class Edge implements Comparable<Edge> {
    int src, dest, weight;

    public Edge(int src, int dest, int weight) {
        this.src = src;
        this.dest = dest;
        this.weight = weight;
    }

    public int compareTo(Edge other) {
        return this.weight - other.weight;
    }
}

class DisjointSet {
    int[] parent, rank;

    public DisjointSet(int n) {
        parent = new int[n];
        rank = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
            rank[i] = 0;
        }
    }

    public int find(int u) {
        if (parent[u] != u) {
            parent[u] = find(parent[u]);
        }
        return parent[u];
    }

    public void union(int u, int v) {
        int pu = find(u);
        int pv = find(v);
        if (pu == pv) return;
        if (rank[pu] < rank[pv]) {
            parent[pu] = pv;
        } else if (rank[pu] > rank[pv]) {
            parent[pv] = pu;
        } else {
            parent[pv] = pu;
            rank[pu]++;
        }
    }
}

public class KruskalAlgorithm {
    public static List<Edge> kruskal(List<Edge> edges) {
        Collections.sort(edges);
        int n = Arrays.stream(edges.toArray(new Edge[0]))
                      .mapToInt(edge -> Math.max(edge.src, edge.dest))
                      .max()
                      .orElse(0) + 1;
        DisjointSet ds = new DisjointSet(n);
        List<Edge> mst = new ArrayList<>();
        for (Edge edge : edges) {
            int srcParent = ds.find(edge.src);
            int destParent = ds.find(edge.dest);
            if (srcParent != destParent) {
                mst.add(edge);
                ds.union(srcParent, destParent);
            }
        }
        return mst;
    }

    public static void displayAdjacencyMatrix(List<Edge> edges) {
        int n = Arrays.stream(edges.toArray(new Edge[0]))
                      .mapToInt(edge -> Math.max(edge.src, edge.dest))
                      .max()
                      .orElse(0) + 1;
        int[][] adjacencyMatrix = new int[n][n];
        for (Edge edge : edges) {
            adjacencyMatrix[edge.src][edge.dest] = 1;
            adjacencyMatrix[edge.dest][edge.src] = 1; // Assuming the graph is undirected
        }

        System.out.println("Adjacency Matrix:");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                System.out.print(adjacencyMatrix[i][j] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        boolean tryAgain = true;

        while (tryAgain) {
            List<Edge> edges = new ArrayList<>();
            System.out.println("Enter edges in format: source destination weight (-1 to finish)");
            while (true) {
                int src = scanner.nextInt();
                if (src == -1) break;
                int dest = scanner.nextInt();
                int weight = scanner.nextInt();
                edges.add(new Edge(src, dest, weight));
            }

            List<Edge> mst = kruskal(edges);
            int minCost = 0;
            System.out.println("Minimum Spanning Tree:");
            for (Edge edge : mst) {
                System.out.println(edge.src + " - " + edge.dest + ", Weight: " + edge.weight);
                minCost += edge.weight;
            }
            System.out.println("Minimum Cost: " + minCost);

            displayAdjacencyMatrix(edges);

            System.out.print("Do you want to try again? (yes/no): ");
            String choice = scanner.next().toLowerCase();
            tryAgain = choice.equals("yes");
        }

        scanner.close();
    }
}
